{"version":3,"sources":["binarySearchTree.js","index.js"],"names":["Node","key","left","right","BinarySearchTree","root","node","insertNode","tree","insert","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;AAEA,IAAMQ,OAAO,IAAIJ,kCAAJ,EAAb;;AAEAI,KAAKC,MAAL,CAAY,EAAZ;AACAD,KAAKC,MAAL,CAAY,CAAZ;AACAD,KAAKC,MAAL,CAAY,EAAZ;AACAD,KAAKC,MAAL,CAAY,CAAZ;AACAD,KAAKC,MAAL,CAAY,CAAZ;AACAD,KAAKC,MAAL,CAAY,CAAZ;AACAC,QAAQC,GAAR,CAAYH,IAAZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IDVMR,OACJ,cAAYC,GAAZ,EAAiB;AAAA;;AACf,OAAKA,GAAL,GAAWA,GAAX;AACA,OAAKC,IAAL,GAAY,IAAZ;AACA,OAAKC,KAAL,GAAa,IAAb;AACD;;AAGH;;;;;;;IAKaC,2BAAAA;AACX,8BAAc;AAAA;;AACZ,SAAKC,IAAL,GAAY,IAAZ;AACD;;;;2BAEMJ,KAAK;AACV,UAAIK,OAAO,IAAIN,IAAJ,CAASC,GAAT,CAAX;;AAEA,UAAI,CAAC,KAAKI,IAAV,EAAgB;AACd,aAAKA,IAAL,GAAYC,IAAZ;AACD,OAFD,MAEO;AACLC,mBAAW,KAAKF,IAAhB,EAAsBC,IAAtB;AACD;;AAED,eAASC,UAAT,CAAoBF,IAApB,EAA0BC,IAA1B,EAAgC;AAC9B,YAAIA,KAAKL,GAAL,GAAWI,KAAKJ,GAApB,EAAyB;AACvB,cAAII,KAAKH,IAAL,KAAc,IAAlB,EAAwB;AACtBG,iBAAKH,IAAL,GAAYI,IAAZ;AACD,WAFD,MAEO;AACLC,uBAAWF,KAAKH,IAAhB,EAAsBI,IAAtB;AACD;AACF,SAND,MAMO;AACL,cAAID,KAAKF,KAAL,KAAe,IAAnB,EAAyB;AACvBE,iBAAKF,KAAL,GAAaG,IAAb;AACD,WAFD,MAEO;AACLC,uBAAWF,KAAKF,KAAhB,EAAuBG,IAAvB;AACD;AACF;AACF;AACF","file":"tree.755dbd17.map","sourceRoot":"..","sourcesContent":["class Node {\r\n  constructor(key) {\r\n    this.key = key;\r\n    this.left = null;\r\n    this.right = null;\r\n  }\r\n}\r\n\r\n/**\r\n *二叉搜索树\r\n *\r\n * @class BinarySearchTree\r\n */\r\nexport class BinarySearchTree {\r\n  constructor() {\r\n    this.root = null;\r\n  }\r\n\r\n  insert(key) {\r\n    let node = new Node(key);\r\n\r\n    if (!this.root) {\r\n      this.root = node;\r\n    } else {\r\n      insertNode(this.root, node);\r\n    }\r\n\r\n    function insertNode(root, node) {\r\n      if (node.key < root.key) {\r\n        if (root.left === null) {\r\n          root.left = node;\r\n        } else {\r\n          insertNode(root.left, node);\r\n        }\r\n      } else {\r\n        if (root.right === null) {\r\n          root.right = node;\r\n        } else {\r\n          insertNode(root.right, node);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { BinarySearchTree } from './binarySearchTree';\r\n\r\nconst tree = new BinarySearchTree();\r\n\r\ntree.insert(10);\r\ntree.insert(4);\r\ntree.insert(16);\r\ntree.insert(2);\r\ntree.insert(5);\r\ntree.insert(4);\r\nconsole.log(tree);"]}