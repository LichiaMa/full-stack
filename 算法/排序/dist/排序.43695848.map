{"version":3,"sources":["bubbleSort.js","selectionSort.js","mergeSort.js","quickSort.js","index.js"],"names":["bubbleSort","bubbleSort2","arr","length","i","j","selectionSort","minIndex","mergeSort","array","recursion","mid","Math","floor","left","slice","right","merge","res","li","ri","push","quickSort","pivot","lesser","greater","element","concat","console","log"],"mappings":"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","file":"排序.43695848.map","sourceRoot":"..","sourcesContent":["/**\n *冒泡排序\n *\n * @export\n * @param {*} arr\n * @returns\n */\nexport function bubbleSort(arr) {\n  const length = arr.length;\n  for (let i = 0; i < length; i++) {\n    for (let j = 0; j < length - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n      }\n    }\n  }\n\n  return arr;\n}\n\n/**\n *改进后的冒泡排序\n *\n * @export\n * @param {*} arr\n * @returns\n */\nexport function bubbleSort2(arr) {\n  const length = arr.length;\n  for (let i = 0; i < length; i++) {\n    for (let j = 0; j < length - 1 - i; j++) {\n      if (arr[j] > arr[j + 1]) {\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n      }\n    }\n  }\n\n  return arr;\n}\n","/**\n *选择排序\n *\n * @export\n * @param {Array} arr\n * @returns\n */\nexport function selectionSort(arr) {\n  const length = arr.length;\n  let minIndex;\n\n  for (let i = 0; i < length - 1; i++) {\n    minIndex = i;\n\n    for (let j = i; j < length; j++) {\n      if (arr[minIndex] > arr[j]) {\n        minIndex = j;\n      }\n    }\n\n    if (i !== minIndex) {\n      [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];\n    }\n  }\n  return arr;\n}\n","/**\n *归并排序\n *\n * @export\n * @param {*} arr\n */\nexport function mergeSort(array) {\n  if (array.length === 1) {\n    return array;\n  }\n\n  return recursion(array);\n}\n\nfunction recursion(arr) {\n  const length = arr.length;\n  const mid = Math.floor(length / 2);\n  const left = arr.slice(0, mid);\n  const right = arr.slice(mid, length);\n  return merge(recursion(left), recursion(right));\n}\n\nfunction merge(left, right) {\n  let res = [],\n    li = 0,\n    ri = 0;\n\n  while (li < left.length && ri < right.length) {\n    if (left[li] < right[li]) {\n      res.push(left[li]);\n      li++;\n    } else {\n      res.push(right[ri]);\n      ri++;\n    }\n  }\n\n  while (li < left.length) {\n    res.push(left[li]);\n    li++;\n  }\n\n  while (ri < right.length) {\n    res.push(right[ri]);\n    ri++;\n  }\n\n  return res;\n}\n","export function quickSort(arr) {\n  if (arr.length === 0) {\n    return [];\n  }\n\n  const pivot = arr[Math.floor(arr.length / 2)];\n  const lesser = [];\n  const greater = [];\n  for (let i = 0; i < arr.length; i++) {\n    const element = arr[i];\n\n    if (element < pivot) {\n      lesser.push(element);\n    } else if (element > pivot) {\n      greater.push(element);\n    }\n  }\n\n  return quickSort(lesser).concat(pivot, quickSort(greater));\n}\n","import { bubbleSort, bubbleSort2 } from \"./bubbleSort\";\nimport { selectionSort } from \"./selectionSort\";\nimport { mergeSort } from \"./mergeSort\";\nimport { quickSort } from \"./quickSort\";\n\nlet arr = [8, 7, 6, 5, 4, 3, 2, 1];\n\n// arr = bubbleSort(arr);\n// arr = bubbleSort2(arr);\n// arr = selectionSort(arr);\n// arr = mergeSort(arr)\narr = quickSort(arr)\nconsole.log(arr);\n"]}